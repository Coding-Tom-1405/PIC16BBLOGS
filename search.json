[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/bruin/index.html",
    "href": "posts/bruin/index.html",
    "title": "Homework 0: Data Visualization",
    "section": "",
    "text": "In this blog, I will use the Palmer Penguins dataset to show how to create interesting data visualization.\nTo access the dataframe, we first have to read in the csv file using pandas. Thus, we need to import the pandas library in order to work with data.\n\nimport pandas as pd\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)     \n\nNext, we want to visualize the data structure to see what type of information we are working with. We can use the head function of pandas to access the first five entries.\n\npenguins.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n\n\n\n\n\nFollowing standard pandas operations, we want to clean up our data a little bit, removing any “N/A” entries and shortening the names.\n\npenguins = penguins.dropna(subset = [\"Body Mass (g)\", \"Sex\"])  # Removing penguins with NaN entries in Sex or Body Mass\npenguins[\"Species\"] = penguins[\"Species\"].str.split().str.get(0)   # Only getting the first word of the Species entry (i.e. species type)\ncols = [\"Species\",                 # Specifying the columns we want to look further\n        \"Island\",                  # into from the penguins data set\n        \"Sex\", \n        \"Culmen Length (mm)\", \n        \"Culmen Depth (mm)\", \n        \"Flipper Length (mm)\", \n        \"Body Mass (g)\"]\npenguins = penguins[cols]          # Choosing the columns we want our data frame to consist of\n\nNow, let’s take a look at the new simplified data set.\n\npenguins.head()\n\n\n\n\n\n\n\n\nSpecies\nIsland\nSex\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\n\n\n\n\n0\nAdelie\nTorgersen\nMALE\n39.1\n18.7\n181.0\n3750.0\n\n\n1\nAdelie\nTorgersen\nFEMALE\n39.5\n17.4\n186.0\n3800.0\n\n\n2\nAdelie\nTorgersen\nFEMALE\n40.3\n18.0\n195.0\n3250.0\n\n\n4\nAdelie\nTorgersen\nFEMALE\n36.7\n19.3\n193.0\n3450.0\n\n\n5\nAdelie\nTorgersen\nMALE\n39.3\n20.6\n190.0\n3650.0\n\n\n\n\n\n\n\nNote that there were additional column information which we are going to ignore for today.\nOnce the data set is cleaned, we can start creating our data visualizations. There are many visuals that we can use for the data set like scatterplot, histogram, or boxplot, but for today, we will use scatterplots. In our examples, we will be using the matplotlib, a common library used for data visualizaiton. So, we need to import the matplotlib library as well.\n\nimport matplotlib\nfrom matplotlib import pyplot as plt\n\nBecause this data set consists of different types of penguin species, we need to figure out how many species types we are dealing with and what their names are so that we know what to call in our code. We can use the value_counts function in the pandas library to do the following:\n\npenguins[\"Species\"].value_counts()  # Counting the number of penguins be each Species type\n\nSpecies\nAdelie       146\nGentoo       120\nChinstrap     68\nName: count, dtype: int64\n\n\nFrom this, we know that the penguins in this data set are classified as one of the three following species type: Adelie, Gentoo, or Chinstrap.\nNow, we can start writing our code to create the scatterplot. First, we need to separate the penguin types and create individual data frames for each of the three species. To do so, we can use boolean indexing. We can use a == statement to return a True or False value indicating whether or not a specific entry is of the indicated penguin species\nFor example, to find only the Gentoo penguins, we will say penguins[\"Species\"]==\"Gentoo\" as our conditional statement for including an into the created data frame. This pattern will help us create our three separate data frames as follows:\n\n# Generating the separate dataframes based on Species\nAdelie_dataset = penguins[penguins[\"Species\"] == \"Adelie\"]\nGentoo_dataset = penguins[penguins[\"Species\"] == \"Gentoo\"]\nChinstrap_dataset = penguins[penguins[\"Species\"] == \"Chinstrap\"]\n\nLet’s check to see if this successfully separated the penguins by species.\n\nAdelie_dataset\n\n\n\n\n\n\n\n\nSpecies\nIsland\nSex\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\n\n\n\n\n0\nAdelie\nTorgersen\nMALE\n39.1\n18.7\n181.0\n3750.0\n\n\n1\nAdelie\nTorgersen\nFEMALE\n39.5\n17.4\n186.0\n3800.0\n\n\n2\nAdelie\nTorgersen\nFEMALE\n40.3\n18.0\n195.0\n3250.0\n\n\n4\nAdelie\nTorgersen\nFEMALE\n36.7\n19.3\n193.0\n3450.0\n\n\n5\nAdelie\nTorgersen\nMALE\n39.3\n20.6\n190.0\n3650.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n147\nAdelie\nDream\nFEMALE\n36.6\n18.4\n184.0\n3475.0\n\n\n148\nAdelie\nDream\nFEMALE\n36.0\n17.8\n195.0\n3450.0\n\n\n149\nAdelie\nDream\nMALE\n37.8\n18.1\n193.0\n3750.0\n\n\n150\nAdelie\nDream\nFEMALE\n36.0\n17.1\n187.0\n3700.0\n\n\n151\nAdelie\nDream\nMALE\n41.5\n18.5\n201.0\n4000.0\n\n\n\n\n146 rows × 7 columns\n\n\n\n\nGentoo_dataset\n\n\n\n\n\n\n\n\nSpecies\nIsland\nSex\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\n\n\n\n\n220\nGentoo\nBiscoe\nFEMALE\n46.1\n13.2\n211.0\n4500.0\n\n\n221\nGentoo\nBiscoe\nMALE\n50.0\n16.3\n230.0\n5700.0\n\n\n222\nGentoo\nBiscoe\nFEMALE\n48.7\n14.1\n210.0\n4450.0\n\n\n223\nGentoo\nBiscoe\nMALE\n50.0\n15.2\n218.0\n5700.0\n\n\n224\nGentoo\nBiscoe\nMALE\n47.6\n14.5\n215.0\n5400.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n338\nGentoo\nBiscoe\nFEMALE\n47.2\n13.7\n214.0\n4925.0\n\n\n340\nGentoo\nBiscoe\nFEMALE\n46.8\n14.3\n215.0\n4850.0\n\n\n341\nGentoo\nBiscoe\nMALE\n50.4\n15.7\n222.0\n5750.0\n\n\n342\nGentoo\nBiscoe\nFEMALE\n45.2\n14.8\n212.0\n5200.0\n\n\n343\nGentoo\nBiscoe\nMALE\n49.9\n16.1\n213.0\n5400.0\n\n\n\n\n120 rows × 7 columns\n\n\n\n\nChinstrap_dataset\n\n\n\n\n\n\n\n\nSpecies\nIsland\nSex\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\n\n\n\n\n152\nChinstrap\nDream\nFEMALE\n46.5\n17.9\n192.0\n3500.0\n\n\n153\nChinstrap\nDream\nMALE\n50.0\n19.5\n196.0\n3900.0\n\n\n154\nChinstrap\nDream\nMALE\n51.3\n19.2\n193.0\n3650.0\n\n\n155\nChinstrap\nDream\nFEMALE\n45.4\n18.7\n188.0\n3525.0\n\n\n156\nChinstrap\nDream\nMALE\n52.7\n19.8\n197.0\n3725.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n215\nChinstrap\nDream\nMALE\n55.8\n19.8\n207.0\n4000.0\n\n\n216\nChinstrap\nDream\nFEMALE\n43.5\n18.1\n202.0\n3400.0\n\n\n217\nChinstrap\nDream\nMALE\n49.6\n18.2\n193.0\n3775.0\n\n\n218\nChinstrap\nDream\nMALE\n50.8\n19.0\n210.0\n4100.0\n\n\n219\nChinstrap\nDream\nFEMALE\n50.2\n18.7\n198.0\n3775.0\n\n\n\n\n68 rows × 7 columns\n\n\n\nGreat! Now all we have left is the scatterplot. For matplotlib, the syntax for creating a scatterplot using a dataset is plt.scatter(df[x],df[y]) where df is the dataset name and x,y are the independent and dependent columns, respectively, that we want to work with. For our example, we will use Culmen Length and Flipper Length. So using Adelie, we will use the following line of code:\nplt.scatter(Adelie_dataset[\"Culmen Length (mm)\"], Adelie_dataset[\"Flipper Length (mm)\"])\nBecause we are also working with three different data frames, meaning we will have three separate scatterplots on one plot, we can also add a label in our line of code. This way, when we combine all of them into one figure, we can use a legend to help us differentiate each data set. Thus, our code for each species data set will look like this:\n\n# Generating the scatterplots for each species, labeling each scatterplot by their name so we can differentiate them with a legend\nplt.scatter(Adelie_dataset[\"Culmen Length (mm)\"], Adelie_dataset[\"Flipper Length (mm)\"], label = \"Adelie\")\nplt.scatter(Gentoo_dataset[\"Culmen Length (mm)\"], Gentoo_dataset[\"Flipper Length (mm)\"], label = \"Gentoo\")\nplt.scatter(Chinstrap_dataset[\"Culmen Length (mm)\"], Chinstrap_dataset[\"Flipper Length (mm)\"], label = \"Chinstrap\")\n\n\n\n\n\n\n\n\nNow that we have out scatterplot, we can add features to make the graph more clear. To add the main title, we can use plt.title(). For the the x and y titles, it will be plt.xlabel() and plt.ylabel(), respectively. And finally, to create our legend, we will use plt.legend(). Once we added all this, our figure may look something like this:\n\n# Generating the scatterplots for each species, labeling each scatterplot by their name so we can differentiate them with a legend\nplt.scatter(Adelie_dataset[\"Culmen Length (mm)\"], Adelie_dataset[\"Flipper Length (mm)\"], label = \"Adelie\")\nplt.scatter(Gentoo_dataset[\"Culmen Length (mm)\"], Gentoo_dataset[\"Flipper Length (mm)\"], label = \"Gentoo\")\nplt.scatter(Chinstrap_dataset[\"Culmen Length (mm)\"], Chinstrap_dataset[\"Flipper Length (mm)\"], label = \"Chinstrap\")\n\n# Adding the title, x and y axes labels, and legend\nplt.title(\"Culmen Length vs. Flipper Length\")\nplt.xlabel(\"Culmen Length (mm)\")\nplt.ylabel(\"Flipper Length (mm)\")\nplt.legend()\n\n\n\n\n\n\n\n\nWith this completed scatterplot, we can finally analyze the two data columns. From this, it appears that for all species, there is a moderate to strong positive correlation between Culmen Length and Flipper Length. Also, it appears that these two may be good candidate factors in differentiating the species type as there are three relatively isolated clusters. And with that, we have successfully created our data visualization."
  },
  {
    "objectID": "posts/bruin/climate_database.html",
    "href": "posts/bruin/climate_database.html",
    "title": "pic16bblog",
    "section": "",
    "text": "def query_climate_database(db_file, country, year_begin, year_end, month):\n    \n\nSyntaxError: incomplete input (2025248856.py, line 2)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pic16bblog",
    "section": "",
    "text": "Homework 1: Datawrangling and Visualization\n\n\n\n\n\n\nWeek 2\n\n\n\n\n\n\n\n\n\nJan 19, 2024\n\n\nThomas Nguyen\n\n\n\n\n\n\n\n\n\n\n\n\nHomework 0: Data Visualization\n\n\n\n\n\n\nWeek 1\n\n\nHomework\n\n\n\n\n\n\n\n\n\nJan 19, 2024\n\n\nThomas Nguyen\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 17, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 14, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  }
]